? std::*
op::* = "libop/op.h"
std::ios_base::* = <ios>
std::copy = <algorithm>
std::min = <algorithm>
std::move = <algorithm>
std::reverse = <algorithm>
std::array = <array>
assert = <cassert>
std::isspace = <cctype>
std::fabs = <cmath>
std::isnan = <cmath>
std::sqrt = <cmath>
std::sqrtf = <cmath>
std::max_align_t = <cstddef>
std::size_t = <cstddef>
std::memcpy = <cstring>
std::exception = <exception>
std::ifstream = <fstream>
std::hash = <functional>
std::initializer_list = <initializer_list>
std::boolalpha = <ios>
std::fixed = <ios>
std::hex = <ios>
std::internal = <ios>
std::ios = <ios>
std::ios_base = <ios>
std::left = <ios>
std::oct = <ios>
std::right = <ios>
std::scientific = <ios>
std::showbase = <ios>
std::showpoint = <ios>
std::showpos = <ios>
std::streamsize = <ios>
std::uppercase = <ios>
std::cout = <iostream>
std::back_inserter = <iterator>
std::bidirectional_iterator_tag = <iterator>
std::forward_iterator_tag = <iterator>
std::input_iterator_tag = <iterator>
std::inserter = <iterator>
std::iterator = <iterator>
std::iterator_traits = <iterator>
std::random_access_iterator_tag = <iterator>
std::numeric_limits = <limits>
std::numerical_limits = <limits>
std::map = <map>
std::addressof = <memory>
std::allocator = <memory>
std::make_shared = <memory>
std::shared_ptr = <memory>
std::bad_alloc = <new>
std::basic_ostream = <ostream>
std::ostream = <ostream>
std::generate_canonical = <random>
std::uniform_int_distribution = <random>
std::uniform_real_distribution = <random>
std::set = <set>
std::basic_ostringstream = <sstream>
std::basic_stringstream = <sstream>
std::stringstream = <sstream>
std::stack = <stack>
NULL = <stddef.h>
max_align_t = <stddef.h>
nullptr_t = <stddef.h>
offsetof = <stddef.h>
ptrdiff_t = <stddef.h>
size_t = <stddef.h>
std::domain_error = <stdexcept>
std::invalid_argument = <stdexcept>
std::out_of_range = <stdexcept>
std::range_error = <stdexcept>
std::runtime_error = <stdexcept>
std::basic_string = <string>
std::char_traits = <string>
std::string = <string>
std::get = <tuple>
std::make_tuple = <tuple>
std::tie = <tuple>
std::tuple = <tuple>
std::tuple_size = <tuple>
std::common_type = <type_traits>
std::conditional = <type_traits>
std::decay = <type_traits>
std::enable_if = <type_traits>
std::false_type = <type_traits>
std::has_trivial_destructor = <type_traits>
std::integral_constant = <type_traits>
std::is_arithmetic = <type_traits>
std::is_convertible = <type_traits>
std::is_floating_point = <type_traits>
std::is_integral = <type_traits>
std::is_lvalue_reference = <type_traits>
std::is_move_assignable = <type_traits>
std::is_move_constructible = <type_traits>
std::is_nothrow_constructible = <type_traits>
std::is_nothrow_move_assignable = <type_traits>
std::is_nothrow_move_constructible = <type_traits>
std::is_same = <type_traits>
std::is_signed = <type_traits>
std::make_unsigned = <type_traits>
std::remove_reference = <type_traits>
std::true_type = <type_traits>
std::declval = <utility>
std::forward = <utility>
std::integer_sequence = <utility>
std::make_pair = <utility>
std::pair = <utility>
std::swap = <utility>
std::vector = <vector>
